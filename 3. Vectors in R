# Learning R from data camp - R programming course _ module - 2/ The R Book/ An Introduction to R

#### VECTORS IN R

## Contents
## Constructing a vector in R
## Naming a matrix in R 
## Vector functions in R
## Subsetting of a vector in R
## Vector arithmatics in R


## VECTOR CREATION IN R

# To create a vector using the concatenation function c
x = c(1, 2, 3, 4, 3, 3); x
x=c(1:8);x # To create a vector containing a sequence of natural numbers from 1 to 8         MORE ON SEQUENCE IN FILE 4
y=c(5:1); y # To create a vector containing a decreasing sequence of natural numbers from 5 to 1 
x = c(1:4, 3, 3); x # alternate way for creating a vector containing (1, 2, 3, 4, 3, 3)
1/x # It creates a vector of same length with all elements as one and does element wise division
y<-c(x, 0, x); y # To assign y a verctor containing 13 elements
x <- c(0.5, 0.6); x ## numeric
x <- c(TRUE, FALSE); x ## logical
x <- c(T, F); x ## logical
x <- c("a", "b", "c"); x ## character
x <- 9:29; x ## integer
x <- c(1+0i, 2+4i); x ## complex

# To assign x as a vector
assign("x", c(1, 2, 3)); x
c(10.4, 5.6, 3.1, 6.4, 21.7) -> x; x

# Using vector function
x <- vector("numeric", length = 10); x
 
# We can enter the numbers from the keyboard one at a time using scan
y <- scan()


# Operations on vectors of different length
v<-2*x+y; y # see how vector addition for different length vectors work as Shorter inputs (of non-zero length) are recycled
z<-c(5,6)
t=x+z; t
A<-1:10; length(A) # Length of a vector can be obtained by using lenght() function
B<-c(2,4,8); length(B)
A*B # Shorter inputs (of non-zero length) are recycled

## NAMING A VECTOR

names(B) = c('mon', 'tues', 'wed'); B # To name a vector
coin_toss = c('H', 'H', 'T', 'H', 'T') # Results of 5 consecutive coin tosses
names(coin_toss) = c(1,2,3,4,5) # Denotes trial number
coin_toss

## TO HANDLE MISSING VALUES IN A VECTOR (see more in the file '2 Data Types & Simple Arithmatics in R.R')

#To check for the location of missing values x !="NA".which(is.na(vmv)) OR by using seq(along=vmv)[is.na(vmv)], which makes an index of the missing values in an array
x=c(1:4, NA, NA, -3:0)
x
which(is.na(x))
seq(along=x)[is.na(x)]
# To assign value some constant value to missing value
# by using is.na
x=c(1:4, NA, NA, -3:0)
x[is.na(x)]<-3; x

# To assign value some constant value to missing value
# by using ifelse function
x=c(1:4, NA, NA, -3:0); x
y=ifelse(is.na(x), 2, x); y


## VECTOR FUNCTIONS

x = c(1, -2, 8, 5, 3); y = c(5, 4, 3, 2, 1)
x = c(1,2,3,4,5); y = c(5, 4, 3, 2, 1)
max(x) # maximum value in x
min(x) # minimum value in x
sum(x) # total of all the values in x
mean(x) # arithmetic average of the values in x
median(x) # median value in x
range(x) # vector of minx and maxx
var(x) # sample variance of x
cor(x,y) # correlation between vectors x and y
sort(x) # a sorted version of x # in increasing order
rank(x) # vector of the ranks of the values in x # as we do in rank correlation coefficient
order(x) # an integer vector containing the permutation to sort x into ascending order ## HOW ???
quantile(x) # vector containing the minimum, lower quartile, median, upper quartile, and maximum of x
cumsum(x) # vector containing the sum of all of the elements up to that point ## HOW??
cumprod(x) # vector containing the product of all of the elements up to that point ## HOW ??
cummax(x)#  vector of non-decreasing numbers which are the cumulative maxima of the values in x up to that point
cummin(x) # vector of non-increasing numbers which are the cumulative minima of the values in x up to that point
pmax(x,y,z) # vector, of length equal to the longest of x, y or z, containing the maximum of x, y or z for the ith position in each
pmin(x,y,z) # vector, of length equal to the longest of x, y or z, containing the minimum of x, y or z for the ith position in each

colMeans(x) # column means of dataframe or matrix x
colSums(x) # column totals of dataframe or matrix x
rowMeans(x)# row means of dataframe or matrix x
rowSums(x) # row totals of dataframe or matrix x
# The parallel minimum function, pmin, finds the minimum from any one of the three variables for each subscript, and produces a
# vector as its result (of length equal to the longest of x, y, or z)

x = c(1, 2, 3, 4,5); y = c (3,4,2,1,6); z = c(-1, 3, 1, 3, 0)
pmin(x, y, z); pmax(x, y, z) 
# The functions min and max produce scalar results

# More examples
z=c(2*-1:4); z
x<-c(1:8, NA); x
mean(x)
sum(x)
length(x)
range(x)
max(x)
Y=(x, na.rm=T)
mean(Y)
Min(Y)
mean(x, na.rm=T)
length(x, na.rm=T)

## THE 'tapply' FUNCTION

# To produce a table from the values in the vector, based on one or more grouping variables (often the grouping is by factor levels).

# Example "tapply function'

# For a sample of 30 tax accountants from Australia,their individual state of origin is given in the vector 'states'

states <- c("tas", "sa", "qld", "nsw", "nsw", "nt", "wa", "wa",
           "qld", "vic", "nsw", "vic", "qld", "qld", "sa", "tas",
           "sa", "nt", "wa", "vic", "qld", "nsw", "nsw", "wa",
           "sa", "act", "nsw", "vic", "vic", "act")
length(states); str(states)

statef = factor(states); statef # To create a similar factor
levels(statef) # To get the level of the factor; 8 levels as there are 8 states in AUstralia
# For the same sample of 30 tax accountants, their incomes in another vector 'incomes' (in suitably large units of money)
incomes <- c(60, 49, 40, 61, 64, 60, 59, 54, 62, 69, 70, 42, 56,
             61, 61, 61, 58, 51, 48, 65, 49, 49, 41, 48, 52, 46,
             59, 46, 58, 43)
length(incomes)
 
# To calculate the sample mean income for each state using 'tapply' function
incmeans <- tapply(incomes, statef, mean); incmeans
tapply(incomes,states) # HOW ???

# The function tapply() is used to apply a function, here mean(), to each group of components
# of the first argument, here incomes, defined by the levels of the second component, here statef as if they were separate vector structures

# To do the same for SE, we write a function for SE using var() function (for sample variance)
stderr <- function(x) sqrt(var(x)/length(x))
incster <- tapply(incomes, statef, stderr); incster

# More Examples
getwd() # To check current working directory/ shortcut ctr+shift+h
setwd("D:\\Learning\\Learn R\\R_programming data and codes") # To check current working directory, where csv format excel file is saved/ shortcut ctr+shift+h
data<-read.table("c:\\temp\\daphnia.txt",header=T) # To reads a file & create a data frame named 'data' from it

attach(data) ## THE R BOOK PAGE 25 data file ???
names(data) # The response variable is Growth.rate and the other three variables are factors

tapply(Growth.rate,Detergent,mean) # To produce a table with four entries, one for each level of the factor called Detergent
tapply(Growth.rate,list(Water,Daphnia),median) # To calculate the median growth rate for water type and daphnia clone
# The first variable in the list creates the rows of the table and the second the columns

## THE WITH FUNCTION

# The with function evaluates an R expression in an environment constructed from data
with(OrchardSprays,boxplot(decrease~treatment))
library(MASS); str(bacteria) # In the library MASS, there is a data frame 'bacteria'
with(bacteria,tapply((y=="n"),trt,sum)) # To calculate the number of 'no' (not infected) cases in the bacteria

str(mammals) # To see the structure of dataframe 'mammals
with(mammals,plot(body,brain,log="xy")) # To plot brain weight against body weight for mammals on log-log axes


HOW THE R BOOK PAGE 26???
reg.data<-read.table("c:\\temp\\regression.txt",header=T), reg.data
with (reg.data, {
  model<-lm(growth~tannin)
  summary(model) } )
summary(lm(growth~tannin,data=reg.data))

# Some Examples
x = c(1, 2, 3, 4, 3, 3); x
order(x)
sort.list(x)
max(x)
min(x)
max(z)
min(z)
pmax(x)
?pmax 
# pmax and pmin take one or more vectors (or matrices) as arguments and return a single vector giving the ‘parallel’ maxima (or minima) of the vectors. The first element of the result is the maximum (minimum) of the first elements of all the arguments, the second element of the result is the maximum (minimum) of the second elements of all the arguments and so on. 
# Shorter inputs (of non-zero length) are recycled if necessary.
r = c(5,6,2)
pmin(x, r)
x<-c(1:8, NA); x


## SUBSETTING VECTORS/ SUBSCRIPTS/ INDICES/ VECTOR SELECTION

x = c(11,42,23,14,55); names(x) = c('ajay', 'ravi', 'john', 'anjali', 'namrata'); x
x[2]; x[1:3]; x[5]; x[7] # x[n] gives 'nth' element of vector x, there are only 6 elements, so x[7]is NA
x['ajay']; x[c('ravi', 'namrata')] # To select elements by names
                           # Using '$' operator ???

## Vectors with logical subscripts

x <- 0:10; x; sum(x) # To add all the numbers in the vector (1 to 10)
x < 7 # To test if x is less than 7 T or F
sum(x<7) # To count the no of cases/elements where x < 7
sum(x[x<7]) # logical subscripts # To sum/ add the elements which are less than 7
1*x<5; x*x<5; 1*(x<5); x*(x<5); sum(x*(x<5))

## ADDRESSES WITHIN A VECTOR

y<-c(8,3,5,7,6,6,8,9,2,3,9,4,10,4,11)
sort(y); rev(sort(y))# To write y in ascending descending/ descending
rev(sort(y))[1:3] # To get largest three elements of y
sum(rev(sort(y))[1:3]) # To add largest three elements of y

which(y>5) # To know which elements of y contained values bigger than 5
# We don't use subscripts inside the which function itself
y[y>=5] # To see the values in y >= 5
length(y); length(y[y>=5])


xv<-rnorm(1000,100,10)
xv[seq(25,length(xv),25)] # To extract every nth element from a long vector, say, xv using seq as an index

## FINDING CLOSEST VALUE IN A VECTOR

xv<-rnorm(1000,100,10); xv
which(abs(xv-108)==min(abs(xv-108))) # To get the location of the closest value to 108.0 in vector xv

# To find which is the closest value at this location
closest<-function(xv,sv){
  xv[which(abs(xv-sv)==min(abs(xv-sv)))] }
# To call the function
  closest(xv,108)

## Trimming Vectors Using Negative Subscripts
x<- c(5,8,6,7,1,5,3); x; length(x); x[length(x)]
z <- x[-1]; z # To get a new vector z from x excluding it's first element
x[-length(x)] # To get a new vector from x excluding it's last element
x[-c(1,length(x))] # To exclude both first & last elements
sort(x); sort(x)[-c(1, length(x))] # To remove smallest and largest elements
 
# To calculate a trimmed mean of x which ignores both the smallest and largest values
trim.mean <- function (x) mean(sort(x)[-c(1,length(x))]); trim.mean(x)
x[-2]; x[-4] HOW ????

# MORE EXAMPLE
vec<-1:50
(multiples<-floor(50/7))
(subscripts<-7*(1:multiples))
vec[-subscripts]
# Alternate way
vec[-(1:50*(1:50%%7==0))]

## DATA CAMP EXCERCISES

# TO create vectors
numeric_vector <- c(1, 10, 49)
character_vector <- c('a', 'b', 'c')
# we can use double/single quotes for character
character_vector <- c("a", "b", "c")
boolean_vector <- c(TRUE, FALSE, TRUE)
# Print the vectors
numeric_vector
character_vector
boolean_vector

# Poker winnings from Monday to Friday
poker_vector <- c(140,-50,20,-120,240)
poker_vector
# Roulette winnings form Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10) 
roulette_vector

# Naming vectors
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)
names(poker_vector) <-c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
names(poker_vector)
# Roulette winnings form Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)
names(roulette_vector) <-c("Monday", "Tuesday", "Wednesday", "Thursday", 'Friday')
# Add your code here

# Print the named vectors to the console
poker_vector
roulette_vector

# Efficient way of naming
# Poker winnings from Monday to Friday
poker_vector <- c(140, -50, 20, -120, 240)

# Roulette winnings form Monday to Friday
roulette_vector <- c(-24, -50, 100, -350, 10)

# Create the variable days_vector
days_vector <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
# Assign the names of the day to the roulette and poker_vectors
names(poker_vector) <- days_vector
names(roulette_vector) <- days_vector

# Print the named vectors to the console
poker_vector
roulette_vector

#  Adding the vectors
A_vector <- c(1, 2, 3)
B_vector <- c(4, 5, 6)

# Take the sum of A_vector and B_vector
total_vector <- A_vector + B_vector
# Show me:
total_vector

# Calculate the total winnings 2
# Poker winnings from Monday to Friday:
poker_vector <- c(140, -50, 20, -120, 240)
# Roulette winnings form Monday to Friday:
roulette_vector <- c(-24, -50, 100, -350, 10)

# Name poker and roulette
days <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
names(roulette_vector) <- days
names(poker_vector) <- days

# Up to you now:
total_daily <- poker_vector +roulette_vector
# Show me:
total_daily

# Calculate the total winnings 3
total_poker <- sum(poker_vector)

# Up to you now: assign the correct values to:
total_roulette <-sum(roulette_vector)
total_week <- total_poker + total_roulette

# Show me:
total_week
total_poker

# To compare winning in the two games
# Calculate total gains for poker and roulette
total_poker <- sum(poker_vector)
total_roulette <- sum(roulette_vector)

# Check if you realized higher total gains in poker then in roulette
answer <- total_poker > total_roulette
# Show me the answer
answer

# Subsetting a vector/ vector selection/ Subscripts and Indices
# Define new variable based on a selection
poker_wednesday <- poker_vector[3]
poker_wednesday

# Define new variable based on a selection
poker_midweek <- poker_vector[c(2,3,4)]

# Show me the
poker_midweek

# Define new variable based on a selection
roulette_selection_vector <- roulette_vector[2:5]

# Show me the
roulette_selection_vector

# subsetting by name
midweek_gain <- poker_vector[c("Monday","Tuesday","Wednesday")]
average_midweek_gain <- mean(midweek_gain)
# Show me the
average_midweek_gain
midweek_gain

# What days of the week did you make money on poker
selection_vector <- poker_vector > 0 
# Show me
selection_vector

# What days of the week did you make money on poker
selection_vector <- poker_vector > 0
# Select from poker_vector these days
poker_winning_days <- poker_vector[selection_vector]

# Show me
selection_vector
poker_winning_days

# What days of the week did you make money on roulette
selection_roulette <- roulette_vector > 0 
# Select from roulette_vector these days
roulette_winning_days <- roulette_vector[selection_roulette]
# Show me
selection_roulette
roulette_winning_days
